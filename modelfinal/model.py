# -*- coding: utf-8 -*-
"""최종.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nqv04bF1OVozLn5p3EHa5uvEgwXVDgIK
"""

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd
import numpy as np
import pickle
from sklearn.impute import KNNImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
import xgboost
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error

# 공실률 데이터 가져오기
df1 = pd.read_csv("model_data/공실률.csv")
df1.head()

# 층별임대료 데이티 가져오기
df2 = pd.read_csv("model_data/층별임대료.csv")
df2.head()

# df1, df2 합치기
df3 = pd.merge(df1,df2)
df3.head()

# 위도,경도 데이티 가져오기
df4 = pd.read_csv("model_data/주소.csv")
df4.head()

# df3, df4 합치기
df = pd.merge(df3, df4)
df.head()

# 시, 주소, 세부주소 열 삭제
df.drop(['시','주소','세부주소'], axis=1, inplace=True)
df.head()

# 이상치 확인
q1, q3 = np.percentile(df['공실률'], [25, 75])
iqr = q3 - q1
lower_bound = q1 - (iqr * 1.5)
upper_bound = q3 + (iqr * 1.5)
upper_data_index = np.where(df['공실률'] > upper_bound)
lower_data_index = np.where(df['공실률'] < lower_bound)

# 이상치 대체
for i in upper_data_index:
  df.loc[i,'공실률'] = upper_bound

# 범주형 변수를 가변수로 변환
df = pd.get_dummies(df)

# knn을 활용하여 결측치 처리
imputer = KNNImputer(n_neighbors=5)
data_filled = imputer.fit_transform(df)
data_filled_df = pd.DataFrame(data_filled)

# 결측치 대체
df.loc[1378,'임대료'] = data_filled_df.loc[1378,1]

# 독립변수와 종속변수 나누기
x = df.drop('임대료', axis=1)
y = df['임대료']

x.info()

# 독립변수 minmax scaling
scaler = MinMaxScaler()
x_scaler = scaler.fit_transform(x)
x_scaler = pd.DataFrame(x_scaler, columns = x.columns)
x_scaler

# train set과 test set으로 나누기
x_train, x_test, y_train, y_test = train_test_split(x_scaler, y, test_size=0.2, random_state = 0)

# XGB model 구현
model = xgboost.XGBRegressor(colsample_bytree=0.7, learning_rate=0.03, max_depth=5, max_leaves=31, n_estimators=500, random_state=0, subsample=0.7)

# 성능 평가
model.fit(x_train, y_train)

pickle.dump(model, open('df.pkl', 'wb'))
pred = model.predict(x_test)
rmse = np.sqrt(mean_squared_error(y_test, pred))
print(rmse)